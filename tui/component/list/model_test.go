package list

// Generated by JetBrains AI

import (
	"testing"

	"github.com/charmbracelet/bubbles/viewport"
	"github.com/stretchr/testify/assert"
)

// MockItem implements the Item interface for testing purposes
type MockItem struct {
	content string
}

func (mi MockItem) String() string {
	return mi.content
}

func TestNewWithOptions(t *testing.T) {
	// Mock items for testing
	mockItems := []Item{
		MockItem{content: "Item 1"},
		MockItem{content: "Item 2"},
		MockItem{content: "Item 3"},
	}

	// Test cases for each option
	t.Run("Default New Model", func(t *testing.T) {
		// Call New with no options
		m := New()

		// Assert default values
		assert.Equal(t, DefaultStyles(), m.Styles)
		assert.Equal(t,
			viewport.New(_defaultViewportWidth, _defaultViewportHeight), m.vp)
		assert.Equal(t, false, m.focused)
		assert.Empty(t, m.items)
		assert.Equal(t, 0, m.currIdx)
	})

	t.Run("Set Height", func(t *testing.T) {
		height := 20

		// Call New with the WithHeight option
		m := New(WithHeight(height))

		// Assert height is set correctly
		assert.Equal(t, height, m.vp.Height)
	})

	t.Run("Set Width", func(t *testing.T) {
		width := 30

		// Call New with the WithWidth option
		m := New(WithWidth(width))

		// Assert width is set correctly
		assert.Equal(t, width, m.vp.Width)
	})

	t.Run("Set Items", func(t *testing.T) {
		// Call New with the WithItems option
		m := New(WithItems(mockItems))

		// Assert items are set correctly
		assert.Equal(t, mockItems, m.Items())
		assert.Equal(t, 0, m.currIdx) // Ensure current index is reset
	})

	t.Run("Set Focused", func(t *testing.T) {
		// Call New with the WithFocused option
		m := New(WithFocused(true))

		// Assert focused is set correctly
		assert.True(t, m.Focused())
	})
}
